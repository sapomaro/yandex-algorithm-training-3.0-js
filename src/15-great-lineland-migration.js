/*

15. Великое Лайнландское переселение

Ограничение времени	1 секунда
Ограничение памяти	256Mb
Ввод	стандартный ввод или input.txt
Вывод	стандартный вывод или output.txt

Лайнландия представляет из себя одномерный мир, являющийся прямой, на котором располагаются N городов, 
последовательно пронумерованных от 0 до N - 1 . Направление в сторону от первого города к нулевому названо 
западным, а в обратную — восточным.

Когда в Лайнландии неожиданно начался кризис, все были жители мира стали испытывать глубокое смятение. 
По всей Лайнландии стали ходить слухи, что на востоке живётся лучше, чем на западе.

Так и началось Великое Лайнландское переселение. Обитатели мира целыми городами отправились на восток, 
покинув родные улицы, и двигались до тех пор, пока не приходили в город, в котором средняя цена проживания 
была меньше, чем в родном.

Формат ввода

В первой строке дано одно число N (2 ≤ N ≤ 10^5) — количество городов в Лайнландии. Во второй строке дано 
N чисел ai (0 ≤ ai ≤ 10^9) — средняя цена проживания в городах с нулевого по (N - 1)-ый соответственно.

Формат вывода

Для каждого города в порядке с нулевого по (N - 1)-ый выведите номер города, в который переселятся его 
изначальные жители. Если жители города не остановятся в каком-либо другом городе, отправившись 
в Восточное Бесконечное Ничто, выведите -1.

Пример

Ввод
10
1 2 3 2 1 4 2 5 3 1

Вывод
-1 4 3 4 -1 6 9 8 9 -1

*/

const fs = require('fs');

class Stack {
  data = [];
  push(item) {
    this.data.push(item);
  }
  pop() {
    return this.data.pop();
  }
  get back() {
    return this.data[this.data.length - 1];
  }
  get size() {
    return this.data.length;
  }
};

const stack = new Stack();

const list = fs.readFileSync('input.txt', 'utf8').toString().trim().split('\n')[1].split(' ');

const len = list.length;

const result = new Array(len);

let cost = 0;
let cost2 = 0;
let i2 = 0;

for (let i = 0; i < len; ++i) {
  cost = parseInt(list[i]);
  [i2, cost2] = stack.back || [0, 0];

  if (cost < cost2) {
    do {
      stack.pop();
      result[i2] = i;
      [i2, cost2] = stack.back || [0, 0];
    } while (cost < cost2);
  }
  stack.push([i, cost]);
}

while (stack.size > 0) {
  [i2, cost2] = stack.pop();
  result[i2] = -1;
}

fs.writeFileSync('output.txt', result.join(' '));
